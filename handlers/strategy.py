from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from utils.rate_limit import rate_limit
from utils.logger import log_action, logger
from utils.formatters import format_strategy_params

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
SELECT_STRATEGY, CONFIGURE_STRATEGY = range(2)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
STRATEGIES = {
    "MA": {
        "name": "–°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ",
        "params": {"window": "int"},
        "description": "–¢–æ—Ä–≥–æ–≤–ª—è –ø–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é MA"
    },
    "RSI": {
        "name": "–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã",
        "params": {"period": "int", "oversold": "int", "overbought": "int"},
        "description": "–¢–æ—Ä–≥–æ–≤–ª—è –ø–æ —É—Ä–æ–≤–Ω—è–º RSI"
    },
    "Bollinger": {
        "name": "–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞",
        "params": {"period": "int", "deviation": "float"},
        "description": "–¢–æ—Ä–≥–æ–≤–ª—è –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"
    }
}

@rate_limit()
async def strategy(update: Update, context: ContextTypes.DEFAULT_TYPE, cancel: bool = False):
    message = update.effective_message
    if cancel:
        await message.reply_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return ConversationHandler.END
        
    await log_action("strategy_command", "User requested strategy selection", update.effective_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    keyboard = [
        [InlineKeyboardButton("–°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ (MA)", callback_data="MA")],
        [InlineKeyboardButton("–ò–Ω–¥–µ–∫—Å RSI", callback_data="RSI")],
        [InlineKeyboardButton("–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞", callback_data="Bollinger")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:",
        reply_markup=reply_markup
    )
    
    return SELECT_STRATEGY

async def strategy_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    strategy_key = query.data
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["selected_strategy"] = strategy_key
    strategy_info = STRATEGIES[strategy_key]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    params_desc = "\n".join([
        f"{param} ({meta}):" 
        for param, meta in strategy_info["params"].items()
    ])
    
    await query.edit_message_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {strategy_info['name']}:\n\n"
        f"{strategy_info['description']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"{params_desc}\n\n"
        f"–ü—Ä–∏–º–µ—Ä: window=20"
    )
    
    return CONFIGURE_STRATEGY

async def strategy_configuration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    strategy_key = context.user_data["selected_strategy"]
    strategy_info = STRATEGIES[strategy_key]
    
    try:
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = {}
        for item in user_input.split():
            key, value = item.split('=')
            param_type = strategy_info["params"][key]
            
            if param_type == "int":
                params[key] = int(value)
            elif param_type == "float":
                params[key] = float(value)
            else:
                params[key] = value
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        context.user_data["strategy_params"] = params
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        formatted_params = format_strategy_params(params)
        await update.effective_message.reply_text(
            f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_info['name']} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞:\n\n"
            f"{formatted_params}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /backtest –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        )
        
        await log_action(
            "strategy_configured", 
            f"{strategy_key} with params: {params}", 
            update.effective_user.id
        )
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"Strategy config error: {e}")
        await update.effective_message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )
        return CONFIGURE_STRATEGY