from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler
from tinkoff_api.historical import HistoricalData, INTERVAL_MAPPING  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º INTERVAL_MAPPING –Ω–∞–ø—Ä—è–º—É—é
from utils.logger import logger

SELECT_TICKER, SELECT_INTERVAL = range(2)

TICKERS = ["SBER", "GAZP", "TCSG"]
INTERVALS = ["1min", "5min", "15min", "hour", "day"]

async def candles_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        keyboard = [[InlineKeyboardButton(t, callback_data=f"candles_ticker_{t}")] for t in TICKERS]
        query = update.callback_query
        if query:
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.effective_message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        return SELECT_TICKER
    except Exception as e:
        logger.error(f"Error in candles_start: {e}", exc_info=True)
        if update.callback_query:
            await update.callback_query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–≤–µ—á–µ–π")
        else:
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–≤–µ—á–µ–π")
        return ConversationHandler.END

async def select_ticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        parts = query.data.split("_", 2)
        if len(parts) != 3 or not parts[2]:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–∫–µ—Ä–∞")
            return ConversationHandler.END
        ticker = parts[2]
        context.user_data["candles_ticker"] = ticker
        keyboard = [[InlineKeyboardButton(i, callback_data=f"candles_interval_{i}")] for i in INTERVALS]
        await query.edit_message_text(
            f"–¢–∏–∫–µ—Ä: {ticker}\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECT_INTERVAL
    except Exception as e:
        logger.error(f"Error in select_ticker: {e}", exc_info=True)
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–∫–µ—Ä–∞")
        return ConversationHandler.END

async def select_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        parts = query.data.split("_", 2)
        if len(parts) != 3 or not parts[2]:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
            return ConversationHandler.END
        interval = parts[2]
        ticker = context.user_data.get("candles_ticker", "?")
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await query.edit_message_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ—á–∏ –¥–ª—è {ticker} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval}...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
            historical = HistoricalData()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π INTERVAL_MAPPING –≤–º–µ—Å—Ç–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –∫–ª–∞—Å—Å–∞
            interval_enum = INTERVAL_MAPPING.get(interval)
            if not interval_enum:
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
                return ConversationHandler.END
                
            candles_data = await historical.get_candles(ticker, interval_enum, 7)
            
            if not candles_data:
                await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker}")
                return ConversationHandler.END
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            formatted = [historical.format_candle(c) for c in candles_data]
            text = f"üìä –°–≤–µ—á–∏ {ticker} ({interval}):\n" + "\n".join(formatted[-10:])
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            refresh_button = InlineKeyboardButton(
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                callback_data=f"rcandles_{ticker}_{interval}_7" 
            )
            reply_markup = InlineKeyboardMarkup([[refresh_button]])
            
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error loading candles in select_interval: {e}", exc_info=True)
            await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)[:100]}")
            
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in select_interval: {e}", exc_info=True)
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
        return ConversationHandler.END

candles_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(candles_start, pattern="^candles_start$")],
    states={
        SELECT_TICKER: [CallbackQueryHandler(select_ticker, pattern="^candles_ticker_.*")],
        SELECT_INTERVAL: [CallbackQueryHandler(select_interval, pattern="^candles_interval_.*")],
    },
    fallbacks=[],
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è PTBUserWarning
    per_message=True
)