from telegram import Update
from telegram.ext import ContextTypes
from strategies.ma import MovingAverageStrategy
from strategies.rsi import RSIStrategy
from strategies.bollinger import BollingerBandsStrategy
from utils.mocks import generate_mock_candles
from utils.rate_limit import rate_limit
from utils.logger import log_action
import asyncio
import matplotlib
import matplotlib.pyplot as plt
import io
from concurrent.futures import ThreadPoolExecutor

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±—ç–∫–µ–Ω–¥
matplotlib.use('Agg')

def plot_equity_curve(results):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(results['equity_curve'], label='Equity')
    ax.set_title('Backtest Results')
    ax.set_xlabel('Period')
    ax.set_ylabel('Value')
    ax.legend()
    ax.grid(True)
    
    buf = io.BytesIO()
    fig.savefig(buf, format='png', dpi=100)
    plt.close(fig)
    buf.seek(0)
    return buf

@rate_limit()
async def backtest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_action("backtest_command", "User requested backtest", update.effective_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    strategy_key = context.user_data.get("selected_strategy", "MA")
    params = context.user_data.get("strategy_params", {})
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    if strategy_key == "MA":
        strategy = MovingAverageStrategy(**params)
    elif strategy_key == "RSI":
        strategy = RSIStrategy(**params)
    elif strategy_key == "Bollinger":
        strategy = BollingerBandsStrategy(**params)
    else:
        strategy = MovingAverageStrategy()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = generate_mock_candles(200)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
    results = strategy.backtest(df)
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    loop = asyncio.get_running_loop()
    with ThreadPoolExecutor() as pool:
        buf = await loop.run_in_executor(pool, plot_equity_curve, results)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await update.effective_message.reply_photo(
        photo=buf,
        caption=f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞ {strategy_key}\n"
                f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results['returns']:.2%}"
    )
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
    buf.close()