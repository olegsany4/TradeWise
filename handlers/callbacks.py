
import logging
import random
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

async def refresh_candles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–≤–µ—á–∞–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üîÑ –û–±–Ω–æ–≤–∏—Ç—å".
    """
    query = update.callback_query
    await query.answer()
    try:
        parts = query.data.split("_")
        if len(parts) < 4:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω/–∏–Ω—Ç–µ—Ä–≤–∞–ª")
            return
        _, ticker, interval, days = parts[:4]
        await query.edit_message_text(
            f"‚è≥ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker}..."
        )
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        candles_data = [
            f"{ticker} {interval} {days} | open: {random.randint(90, 110)} | close: {random.randint(90, 110)} | high: {random.randint(110, 120)} | low: {random.randint(80, 90)} | vol: {random.randint(900, 1100)}"
            for _ in range(3)
        ]
        text = f"üìä –°–≤–µ—á–∏ –¥–ª—è {ticker} ({interval}) –∑–∞ {days} –¥–Ω.\n" + "\n".join(candles_data)
        refresh_button = InlineKeyboardButton(
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data=f"rcandles_{ticker}_{interval}_{days}"
        )
        reply_markup = InlineKeyboardMarkup([[refresh_button]])
        await query.edit_message_text(
            text,
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ refresh_candles: %s", e, exc_info=True)
        await query.edit_message_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
